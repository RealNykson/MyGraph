using MyGraph.Utilities;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;
using System.Collections.ObjectModel;
using MyGraph.ViewModels;

namespace MyGraph.ViewModels
{
  class MainWindowVM : NotifyObject
  {
    public double Scale
    {
      get { return Get<double>(); }
      set { Set(value); }
    }
    public double OffsetX
    {
      get { return Get<double>(); }
      set { Set(value); }
    }
    public double OffsetY
    {
      get { return Get<double>(); }
      set { Set(value); }
    }

    public double CanvasHeight
    {
      get { return Get<double>(); }
      set { Set(value); }
    }

    public double CanvasWidth
    {
      get { return Get<double>(); }
      set { Set(value); }
    }

    public ObservableCollection<int> Dots
    {
      get { return Get<ObservableCollection<int>>(); }
      set { Set(value); }
    }

    public IRelayCommand ChangeThemeCommand { get; private set; }


    public Point MousePos
    {
      get { return _lastPosition; }
    }
    public static ObservableCollection<NodeVM> GlobalNodes;
    public ObservableCollection<NodeVM> Nodes
    {
      get { return Get<ObservableCollection<NodeVM>>(); }
      set { Set(value); GlobalNodes = Nodes; }
    }

    public MainWindowVM()
    {
      ResourceDictionary Theme = new ResourceDictionary() { Source = new Uri("/Resources/Colors/DarkMode.xaml", UriKind.Relative) };
      App.Current.Resources.MergedDictionaries.Add(Theme);

      ChangeThemeCommand = new RelayCommand(ChangeTheme);
      Nodes = new ObservableCollection<NodeVM>();
      Nodes = new ObservableCollection<NodeVM>();
      Dots = new ObservableCollection<int>();

      for (int i = 0; i < 10000; i++)
      {
        Dots.Add(i);
      }
      Nodes.Add(new NodeVM() { name = "test" });
      Nodes.Add(new NodeVM() { name = "new", YPos = 250, XPos = 250 });
      Scale = 1;
    }



    public bool isDraggingNodes()
    {
      return Nodes.Where(n => n.IsDragging == true).Count() > 0;
    }

    public const double ScaleRate = 0.025;
    public const double MinScale = 0.1;
    public const double MaxScale = 3;

    public void MouseWheelZoom(double delta)
    {
      var s = Scale + (delta > 0 ? +ScaleRate : -ScaleRate);
      Scale = Math.Min(Math.Max(MinScale, s), MaxScale);

      //HandleDraggingNodes
      if (isDraggingNodes() && s <= MaxScale && s >= MinScale)
      {
        foreach (NodeVM node in Nodes.Where(n => n.IsSelected == true).ToList())
        {
          double realDelta = (delta > 0 ? -ScaleRate : +ScaleRate);
          node.XPos = node.XPos + (500 * realDelta);
          node.YPos = node.YPos + (300 * realDelta);
        }
      }
    }


    public Point _lastPosition
    {
      get => Get<Point>();
      set => Set(value);
    }
    bool isChanged = false;
    public void MouseMove(Point currentPosition)
    {
      //bool mouseIsDown = System.Windows.Input.Mouse.RightButton == MouseButtonState.Pressed;
      //if (mouseIsDown)
      //{
      //  Mouse.OverrideCursor = Cursors.ScrollAll;
      //  double deltaX = currentPosition.X - _lastPosition.X;
      //  double deltaY = currentPosition.Y - _lastPosition.Y;
      //  OffsetX += deltaX / Scale;
      //  OffsetY += deltaY / Scale;
      //  _lastPosition = currentPosition;
      //}
      //else
      //{
      //  Mouse.OverrideCursor = Cursors.Arrow;
      //}

      //_lastPosition = currentPosition;

      List<NodeVM> DraggingNodes = Nodes.Where(n => n.IsDragging == true).ToList();
      if (DraggingNodes.Count != 0)
      {
        Mouse.OverrideCursor = Cursors.ScrollAll;
        double deltaX = currentPosition.X - _lastPosition.X;
        double deltaY = currentPosition.Y - _lastPosition.Y;

        //Drag all Selected Nodes
        foreach (NodeVM node in Nodes.Where(n => n.IsSelected == true))
        {
          node.XPos += deltaX / Scale;
          node.YPos += deltaY / Scale;
        }

      }
      else
      {
        Mouse.OverrideCursor = Cursors.Arrow;
      }

      _lastPosition = currentPosition;

    }

    public void MouseDown(MouseButtonEventArgs ev)
    {

    }

    private bool darkMode = true;
    public void ChangeTheme()
    {
      ResourceDictionary Theme = new ResourceDictionary() { Source = new Uri(darkMode ? "/Resources/Colors/LightMode.xaml" : "/Resources/Colors/DarkMode.xaml", UriKind.Relative) };
      App.Current.Resources.Clear();
      App.Current.Resources.MergedDictionaries.Add(Theme);
      darkMode = !darkMode;
    }



  }
}
